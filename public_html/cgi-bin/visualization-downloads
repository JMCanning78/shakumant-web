#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys, os, urllib, glob, time
from subprocess import *

if sys.version_info[0] < 3:
    def check_output(*popenargs, **kwargs):
        kwargs['stdout'] = PIPE
        p = Popen(*popenargs, **kwargs)
        (stdout, stderr) = p.communicate()
        if p.returncode != 0:
            raise CalledProcessError(
                "Error in check_output; stdout = '{0}', stderr = '{1}'".format(
                    stdout, stderr))
        return stdout.decode() if isinstance(stdout, bytes) else stdout

    def output(*args, **kwargs):
        to=kwargs.get('file', sys.stdout)
        sep=kwargs.get('sep', ' ')
        end=kwargs.get('end', '\n')
        print >> to, sep.join(str(a) for a in args) + end,
        
else:
    output = getattr(globals()['__builtins__'], 'print')
    
def response_header():
    output("Content-Type: text/html; charset=utf-8")
    output("Status: 200")
    output("")
    
def document_header(config={'title': 'Visualization Downloads Archive'}):
    output("""<!doctype html>
<html>
<head>
  <title>{title}</title>
  <script src="/main-functions.js"></script>
  <link rel="stylesheet" type="text/css" href="/main-styles.css">
  <link rel="icon" type="img" href="/Shakumant-logo-favicon.png">
</head>
""".format(**config))

def document_headrow():
    output('''
  <div class="smallheader">
    <a href="/home.html" class="homelink">
      <img class="homelinklogo"
	   src="/Shakumant-logo-and-text.svg" alt="Shakumant Software logo" />
    </a>
  </div>''')
    
def document_footrow():
    output('<div class="footer">')
    output('<p class="footer">Copyright Â© {0}</p>'.format(time.gmtime().tm_year))
    output('</div>')
    
def document_footer():
    output("</html>")

def document_content(config, macDownloads, windowsDownloads, otherDownloads=()):
    output("<body>")
    document_headrow()
    output("<H1>{title}</H1>".format(**config))
    todo = (('macOS', macDownloads), ('Windows', windowsDownloads))
    if otherDownloads:
        todo += (('Other', otherDownloads),)
    for name, files in todo:
        output(('<div class="columnmenu" id="{0}_downloads">\n'
                '<H2>for {0}</H2>').format(name))
        output('<ul class="menulist">\n{0}\n</ul></div>'.format(
            '\n'.join(('<li class="button" onclick="download_file({0!r})">\n'
                       'Download {1}</li>').format(f, os.path.basename(f))
                      for f in files)))
    document_footrow()
    output("</body>")

logfile = None
def log(msg, newline=True):
    global logfile
    if logfile:
        logfile.write('{0}{1}'.format(msg, '\n' if newline else ''))
    
if __name__ == '__main__':
    executable = os.path.basename(sys.argv[0])
    logfile = open('/tmp/{0}.log'.format(executable), 'a')
    log('\n' + '=' * 78)
    log(check_output(['date']), newline=False)
    log('Called {0}'.format(
        ' '.join("{0!r}".format(x) if ' ' in x else x
                 for x in [executable] + sys.argv[1:])))
    log('Python version: {0}'.format(sys.version_info))
    if '-e' not in sys.argv[1:]:
        log('Environment:')
        for key in sorted(os.environ):
            log('{0:20s} = {1}'.format(key, os.environ[key]))
    dirs = [arg for arg in sys.argv[1:] if os.path.isdir(arg)]
    if len(dirs) == 0:
        dirs = ['../downloads']
    
    request_method = os.environ.get('REQUEST_METHOD', '?')
    if request_method in ('GET', 'PUT'):
        response_header()
        config={'title': 'Visualization Downloads Archive'}
        document_header(config=config)
        sections = {'mac': '*_[0-9][0-9].dmg', 
                    'win': '*_[0-9][0-9].zip',
                    'other': '*.zip'}
        last = 'other'
        done = set()
        for section in list(k for k in sections if k != last) + [last]:
            downloads=[f for dir in dirs
                       for f in glob.glob(os.path.join(dir, sections[section]))
                       if not os.path.islink(f) and f not in done]
            downloads.sort(key=os.path.basename, reverse=True)
            sections[section] = downloads
            done |= set(downloads)
        log('Found {0} among {1}'
            .format(', '.join('{0} {1}'.format(str(len(sections[k])), k)
                              for k in sections),
                    dirs))
        document_content(config, sections['mac'], sections['win'],
                         otherDownloads=sections['other'])
        document_footer()
    else:
        log('Request method {0} {1}'.format(
            request_method, 'unset' if request_method == '?' else 'unknown'))
        log('Ignoring request')
